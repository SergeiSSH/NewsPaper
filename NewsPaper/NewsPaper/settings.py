"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-fz*(_u+utkl@+yapi+pc$oh^&-e=jtce@j&w!-)zsl@(51+#(a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.sites',
    'django.contrib.flatpages',
    'NewsPaper',
    'fpages',
    'news',

    'accounts',
    'django_filters',
    'signup',
    'protect',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django_apscheduler',

]

DEFAULT_FROM_EMAIL = ''

SITE_ID = 1

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'basic.middlewares.TimezoneMiddleware',  # add that middleware!
]

ROOT_URLCONF = 'NewsPaper.urls'

LOCALE_PATH = [
    os.path.join(BASE_DIR, 'locale')
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
LANGUAGES = [
    ('en-us', 'English'),
    ('ru', 'Русский')
]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field


STATICFILES_DIRS = [
    BASE_DIR / "static"
]

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

LOGIN_URL = 'accounts/login/'
LOGIN_REDIRECT_URL = '/'

ACCOUNT_FORMS = {'signup': 'news.form.CommonSignup'}

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 465
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_USE_SSL = True

SERVER_EMAIL = ''

# формат даты, которую будет воспринимать наш задачник
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

# если задача не выполняется за 25 секунд, то она автоматически снимается, можете поставить время побольше, но как правило, это сильно бьёт по производительности сервера
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),  # folder
    }
}
LOGGING = {
    'version': 1,
    'disable_existing_logger': False,
    'style':'{',
    'loggers': {
        'django': {
            'handlers': ['console', 'news'],

            'level': 'DEBUG',
        },

        'django.request': {
         'handlers': ['mail_admin', 'errors'],
         'level': 'ERROR',
         'formatter': 'general',


        },
        'django.server': {
         'handlers': ['mail_admin', 'errors'],
         'level': 'ERROR',
         'formatter': 'general',

        },
        'django.template': {
            'handlers': ['errors'],
            'level': 'ERROR'

        },
        'django.db_backends': {
            'handlers': ['errors'],
            'level': 'ERROR'

        },
        'django.security': {
            'handlers': ['security'],
            'level': 'ERROR'

        },
    },


    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },

        'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse',
            },
        },

    'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'level': 'INFO',
                'filters': ['require_debug_true'],
                'formatter': 'myformatter',
            },

            'mail_admins': {
                'leve': 'ERROR',
                'class': 'django.utils.log.AdminEmailHandler',
                'filters': ['require_debug_false'],

            },
            'news': {
                'level': 'INFO',
                'class': 'logging.FileHandler',
                'filename': 'general.log',
                'formatter': 'general',
            },
            'errors': {
                'level': 'ERROR, CRITICAL',
                'class': 'logging.FileHandler',
                'filename': 'errors.log',
                'formatter': 'general',
            },
            'security': {
                'level': 'ERROR, CRITICAL',
                'class': 'logging.FileHandler',
                'filename': 'security.log',
                'formatter': 'general',
            },
    },

    'formatters': {
        'general': {
                'format': '{module} {asctime} {levelname} {message}',
                'datetime': '%Y,%m.%d %H:%M:%S',
                'style': '{',
            },


         'myformatter': {
                'format': '{pathname} {asctime} {levelname} {message} {exc_info}',
                'datetime': '%Y,%m.%d %H:%M:%S',
                'style': '{',
            },
         'mail': {
                'format': '{pathname} {asctime} {levelname} {message} {exc_info}',
                'datetime': '%Y,%m.%d %H:%M:%S',
                'style': '{',
            },

        },

},
